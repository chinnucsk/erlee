// Luocheng.Li
// 2013-04-18

1，无锁。
进程间无共享数据。
进程+消息 方式完成协作。
COP---面向并发编程。

2， % 
百分号用来 注释
3， .
句点号是用来表示语句结束。
4, 变量有绑定和自由两种状态，只能选择其一，可以从自由转换为绑定状态，如何恢复自由？
答：使用命令“f().”.第38页
5，= 模式匹配， “要怎么做才能让这个语句的值变为true?”
语句的true对于erlang来说，意味着什么？
6， 变量没法改变，怎么编程？ 
答：声明一个新的变量，名字跟已存在的变量不一样。
	变量必要大写开头。
7, Shell 对空格敏感。多个表达式可以写在同一行，每个表达式用.号结束。
还会对其他字符敏感吗？
8， 元组。
9，模式匹配 用来获取无组的值。这个获取变量的方式有点麻烦。不够C/C++之类的用一个点号和名字就可以得到值了。
Person={person, 10,34}.
获取：{person,X,Y}=Persion.
这时，X = 10，Y=34. 就是因为匹配。
10， 对于列表，应该理解其子列表的划分。
11， 字符串，Erlang没有字符串。	实质是一个整数列表。
12， $a实际上是一个整数。 $s = 115.
13,	  fun 就是匿名函数。能够返回fun或接受fun作为参数的函数，都被称为高阶函数。
	高阶函数是函数式语言的灵魂所在,它能使程序脱胎换骨。
	Z = fun(X) -> 2 * X end.
	Javascript: myfunc = function (arg1, arg2){}
	可否理解为：Z = fun(X) 即声明了一个函数Z()?
14， 思考一下lists:map如何实现、
	1），操作列表从头开始;
	2）, 如何返回一个新的列表？
15， 1） Fruit = [apple,pear,orange].
	2) MakeTest = fun(L) -> ( fun(X) -> lists:member(X, L) end) end.
	3) IsFruit = MakeTest(Fruit).  <--- 这个时候， IsFruit是一个什么？
	4.1)	IsFruit(pear).		<--- 为何像函数一样调用？
	4.2)	IsFruit(apple).		<--- 为何像函数一样调用？
	
	实质是 ( fun(X) -> lists:member(X, L) end) 返回一个fun。
	即 IsFruit = MakeTest(Fruit). ==>  fun(X) -> lists:member(X, Fruit) end.
	Fruit 只代替了L参数。 那么 IsFruit 仍然是一个 fun,所以能给它参数，并且这个参数
	会替换X。
	
	语言实现层面上，如何让它返回的是fun？
16， 记住，Erlang中的任何东西都是表达式，而所有的表达式都有值。
17， 问，对于表达式中的推导，递归实现，是不是所有的子列表（推导）都展开了，
	再合成结果？ 还是每个小项逐个计算并组成新的小项呢？
	
18, 导出一个函数带有一个参数，用-export([function/1]), 带2个参数的，则用-export([function/1]),
	那么，不带参数的呢？用-export([function/0])吗？
	答:YES.
19, BIF == 内建函数， 
	二进制数据。书写或者打印： <<1,2,3>>, <<4,5,6>>
	一般情况下，使用内建函数去转换各种数据为二进制数据，或者相反过程。
	比特语法，是模式匹配的一种扩展。用于对二进制数据中的单个比特位串进行封包和解包。
20, 如果一个变量只被使用一次，编译器认为有错误。但如果声明变量以下划线开头，则不会报错。	
	下划线变量用途：1）， 命名一个不准备使用的变量。
					2）， 方便调试程序。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	